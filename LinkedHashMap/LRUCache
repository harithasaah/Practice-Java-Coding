/******************************************************************************

To write LRU cache in Java using Generics
LRU :: Least Recently Used 
If cache is full, if you add an item, lRU item is removed

*******************************************************************************/
import java.util.*;
public class LRUCache<K,V> extends LinkedHashMap<K,V>
{
    private final int capacity;
    
    public LRUCache(int capacity){
        super(capacity,0.75f,true); //true - access order mode
        this.capacity = capacity;
    }
    
    @Override 
    public boolean removeEldestEntry(Map.Entry<K,V> eldest){
        return size() > capacity;
    }
    
	public static void main(String[] args) {
		LRUCache<Integer,String> cache = new LRUCache<>(3);
		cache.put(1,"One");
		cache.put(2,"Two");
		cache.put(3,"Three");
		System.out.println(cache);
		cache.get(1); // key 1 :: used, recently used 
		cache.put(4,"Four"); // this is added, 2 will be removed
		System.out.println(cache);
	}
}
