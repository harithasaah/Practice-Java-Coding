/******************************************************************************

QuickSort

1) quickSort - call partition 
               quickSort(arr,low,pi-1)
               quickSort(arr,pi+1,high)
2) partition - pivot (last element)
               i=low + for loop :: swap arr[i] and arr[j] & i++
                       swap arr[i] and arr[high]
                       

*******************************************************************************/
import java.util.*;
public class Main
{
    public static void quickSort(int[] arr,int low,int high){
        if(low<high){
            int pi = partition(arr,low,high);
            quickSort(arr,low,pi-1);
            quickSort(arr,pi+1,high);
        }
    }
    
    public static int partition(int[] arr,int low, int high){
        int pivot = arr[high];
        int i = low;
        for(int j=low; j<high;j++){
            if(arr[j]<pivot){
                //swap arr[i] and arr[j]
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
                i++;
            }
        }
        //swap arr[i] and arr[high]
        int temp = arr[i];
        arr[i] = arr[high];
        arr[high] = temp;
        
        return i; //pivot index
    }
    
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int[] arr = new int[n];
		for(int i=0;i<n;i++){
		    arr[i] = sc.nextInt();
		}
		quickSort(arr,0,n-1);
		System.out.println(Arrays.toString(arr));
	}
}
